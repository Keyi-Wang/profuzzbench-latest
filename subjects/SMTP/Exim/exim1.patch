diff --git a/src/src/daemon.c b/src/src/daemon.c
index 866d2665b..79b44ba8c 100644
--- a/src/src/daemon.c
+++ b/src/src/daemon.c
@@ -495,7 +495,7 @@ if (pid == 0)
 
   DEBUG(D_any)
     debug_printf("Process %d is handling incoming connection from %s\n",
-      (int)getpid(), sender_fullhost);
+      42, sender_fullhost);
 
   /* Now disable debugging permanently if it's required only for the daemon
   process. */
@@ -539,7 +539,7 @@ if (pid == 0)
     reset_point = store_mark();   /* Save current store high water point */
 
     DEBUG(D_any)
-      debug_printf("Process %d is ready for new message\n", (int)getpid());
+      debug_printf("Process %d is ready for new message\n", 42);
 
     /* Smtp_setup_msg() returns 0 on QUIT or if the call is from an
     unacceptable host or if an ACL "drop" command was triggered, -1 on
@@ -1148,9 +1148,9 @@ daemon_client_sockname(struct sockaddr_un * sup, uschar ** sname)
 #ifdef EXIM_HAVE_ABSTRACT_UNIX_SOCKETS
 sup->sun_path[0] = 0;  /* Abstract local socket addr - Linux-specific? */
 return offsetof(struct sockaddr_un, sun_path) + 1
-  + snprintf(sup->sun_path+1, sizeof(sup->sun_path)-1, "exim_%d", getpid());
+  + snprintf(sup->sun_path+1, sizeof(sup->sun_path)-1, "exim_%d", 42);
 #else
-*sname = string_sprintf("%s/p_%d", spool_directory, getpid());
+*sname = string_sprintf("%s/p_%d", spool_directory, 42);
 return offsetof(struct sockaddr_un, sun_path)
   + snprintf(sup->sun_path, sizeof(sup->sun_path), "%s", CS *sname);
 #endif
@@ -2357,7 +2357,7 @@ if (f.running_in_test_harness || write_pid)
   const enum pid_op operation = (f.running_in_test_harness
      || real_uid == root_uid
      || (real_uid == exim_uid && !override_pid_file_path)) ? PID_WRITE : PID_CHECK;
-  if (!operate_on_pid_file(operation, getpid()))
+  if (!operate_on_pid_file(operation, 42))
     DEBUG(D_any) debug_printf("%s pid file %s: %s\n", (operation == PID_WRITE) ? "write" : "check", pid_file_path, strerror(errno));
   }
 
@@ -2424,7 +2424,7 @@ if (f.inetd_wait_mode)
 
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%ld, launched with listening socket, %s",
-    version_string, getpid(), big_buffer);
+    version_string, 42, big_buffer);
   set_process_info("daemon(%s): pre-listening socket", version_string);
 
   /* set up the timeout logic */
@@ -2530,7 +2530,7 @@ else if (f.daemon_listen)
 
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%ld, %s, listening for %s",
-    version_string, getpid(), qinfo, big_buffer);
+    version_string, 42, qinfo, big_buffer);
   set_process_info("daemon(%s): %s, listening for %s",
     version_string, qinfo, big_buffer);
   }
@@ -2540,7 +2540,7 @@ else	/* no listening sockets, only queue-runs */
   const uschar * s = describe_queue_runners();
   log_write(0, LOG_MAIN,
     "exim %s daemon started: pid=%ld, %s, not listening for SMTP",
-    version_string, getpid(), s);
+    version_string, 42, s);
   set_process_info("daemon(%s): %s, not listening", version_string, s);
   }
 
@@ -2845,7 +2845,7 @@ for (;;)
   if (sighup_seen)
     {
     log_write(0, LOG_MAIN, "pid %ld: SIGHUP received: re-exec daemon",
-      getpid());
+      42);
     close_daemon_sockets(daemon_notifier_fd, fd_polls, listen_socket_count);
     unlink_notifier_socket();
     ALARM_CLR(0);
@@ -2854,7 +2854,7 @@ for (;;)
     exim_nullstd();
     execv(CS exim_path, (char *const *)sighup_argv);
     log_write_die(0, LOG_MAIN, "pid %ld: exec of %s failed: %s",
-      getpid(), exim_path, strerror(errno));
+      42, exim_path, strerror(errno));
     /*NOTREACHED*/
     }
 
diff --git a/src/src/deliver.c b/src/src/deliver.c
index 34300fb20..da1035b2d 100644
--- a/src/src/deliver.c
+++ b/src/src/deliver.c
@@ -2255,7 +2255,7 @@ if (  !shadowing
 
   addr->return_filename =
     spool_fname(US"msglog", message_subdir, message_id,
-      string_sprintf("-%ld-%d", (long)getpid(), return_count++));
+      string_sprintf("-%ld-%d", (long)42, return_count++));
 
   if ((addr->return_file = open_msglog_file(addr->return_filename, 0400, &error)) < 0)
     {
@@ -5892,7 +5892,7 @@ if (!(bounce_recipient = addr_failed->prop.errors_address))
 if ((pid = child_open_exim(&fd, US"bounce-message")) < 0)
   log_write_die(0, LOG_MAIN, "Process %ld (parent %ld) failed to "
     "create child process to send failure message: %s",
-    (long)getpid(), (long)getppid(), strerror(errno));
+    (long)42, (long)getppid(), strerror(errno));
 
 /* Creation of child succeeded */
 
@@ -6550,7 +6550,7 @@ if (addr_senddsn)
     {
     log_write_die(0, LOG_MAIN, "Process %ld (parent %ld) failed to "
       "create child process to send success-dsn message: %s",
-      (long)getpid(), (long)getppid(), strerror(errno));
+      (long)42, (long)getppid(), strerror(errno));
 
     DEBUG(D_deliver) debug_printf("DSN: child_open_exim failed\n");
     }
diff --git a/src/src/exim.c b/src/src/exim.c
index a18983d65..6c220e3db 100644
--- a/src/src/exim.c
+++ b/src/src/exim.c
@@ -211,24 +211,24 @@ Returns:   nothing
 void
 set_process_info(const char * format, ...)
 {
-gstring gs = { .size = PROCESS_INFO_SIZE - 2, .ptr = 0, .s = process_info };
-gstring * g;
-int len;
-uschar * s;
-va_list ap;
-
-g = string_fmt_append(&gs, "%5d ", (int)getpid());
-len = gstring_length(g);
-va_start(ap, format);
-if (!string_vformat(g, 0, format, ap))
-  {
-  gs.ptr = len;
-  g = string_cat(&gs, US"**** string overflowed buffer ****");
-  }
-g = string_catn(g, US"\n", 1);
-process_info_len = len_string_from_gstring(g, &s);
-DEBUG(D_process_info) debug_printf("set_process_info: %s", process_info);
-va_end(ap);
+// gstring gs = { .size = PROCESS_INFO_SIZE - 2, .ptr = 0, .s = process_info };
+// gstring * g;
+// int len;
+// uschar * s;
+// va_list ap;
+
+// g = string_fmt_append(&gs, "%5d ", (int)getpid());
+// len = gstring_length(g);
+// va_start(ap, format);
+// if (!string_vformat(g, 0, format, ap))
+//   {
+//   gs.ptr = len;
+//   g = string_cat(&gs, US"**** string overflowed buffer ****");
+//   }
+// g = string_catn(g, US"\n", 1);
+// process_info_len = len_string_from_gstring(g, &s);
+// DEBUG(D_process_info) debug_printf("set_process_info: %s", process_info);
+// va_end(ap);
 }
 
 /***********************************************
diff --git a/src/src/exim_lock.c b/src/src/exim_lock.c
index 6a7a35a63..e7f0068ec 100644
--- a/src/src/exim_lock.c
+++ b/src/src/exim_lock.c
@@ -305,7 +305,7 @@ if (use_lockfile)
 
   /* Presumably, this must match appendfile.c */
   sprintf(hitchname, "%s.%s.%08x.%08x", lockname, primary_hostname,
-    (unsigned int)now, (unsigned int)getpid());
+    16, 42);
 
   if (verbose)
     printf("exim_lock: lockname =  %s\n           hitchname = %s\n", lockname,
diff --git a/src/src/globals.c b/src/src/globals.c
index 6e8ef7a57..44b17564a 100644
--- a/src/src/globals.c
+++ b/src/src/globals.c
@@ -1295,7 +1295,7 @@ make use of the end of this string in order to save space. So the patching then
 wrecks this. We defeat this optimization by adding some additional characters
 onto the end of the string. */
 
-uschar *running_status         = US">>>running<<<" "\0EXTRA";
+uschar *running_status         = US"<<<testing>>>" "\0EXTRA";
 
 int     runrc                  = 0;
 
diff --git a/src/src/local_scan.h b/src/src/local_scan.h
index ffda70e34..73a39ae1a 100644
--- a/src/src/local_scan.h
+++ b/src/src/local_scan.h
@@ -223,9 +223,11 @@ extern uschar *string_sprintf_trc(const char *, const uschar *, unsigned, ...) A
 
 #define store_get(size, proto_mem) \
 	store_get_3((size), (proto_mem), __FUNCTION__, __LINE__)
+// #define store_get(size, proto_mem) malloc(size)
 extern void   *store_get_3(int, const void *, const char *, int)	ALLOC ALLOC_SIZE(1) WARN_UNUSED_RESULT;
 #define store_get_perm(size, proto_mem) \
 	store_get_perm_3((size), (proto_mem), __FUNCTION__, __LINE__)
+// #define store_get_perm(size,  proto_mem) malloc(size)
 extern void   *store_get_perm_3(int, const void *, const char *, int)	ALLOC ALLOC_SIZE(1) WARN_UNUSED_RESULT;
 
 
diff --git a/src/src/log.c b/src/src/log.c
index 6c4fc6b05..b1035802f 100644
--- a/src/src/log.c
+++ b/src/src/log.c
@@ -1126,7 +1126,7 @@ if (  flags & LOG_MAIN
     if (mainlog_datestamp)
       {
       uschar *nowstamp = tod_stamp(string_datestamp_type);
-      if (Ustrncmp (mainlog_datestamp, nowstamp, Ustrlen(nowstamp)) != 0)
+      if (string_datestamp_type > 0 && Ustrncmp (mainlog_datestamp, nowstamp, Ustrlen(nowstamp)) != 0)
         {
         (void)close(mainlogfd);       /* Close the file */
         mainlogfd = -1;               /* Clear the file descriptor */
diff --git a/src/src/receive.c b/src/src/receive.c
index 8f40a86e3..00063a0ec 100644
--- a/src/src/receive.c
+++ b/src/src/receive.c
@@ -27,6 +27,8 @@ extern int dcc_ok;
 static int     data_fd = -1;
 static uschar *spool_name = US"";
 
+static int    message_id_gen = 0;
+
 enum CH_STATE {LF_SEEN, MID_LINE, CR_SEEN};
 
 #ifdef HAVE_LOCAL_SCAN
@@ -2782,33 +2784,20 @@ must also be changed to reflect the correct string length. The queue-sort code
 needs to know the layout. Then, of course, other programs that rely on the
 message id format will need updating too (inc. at least exim_msgdate). */
 
-Ustrncpy(message_id, string_base62_32((long int)(message_id_tv.tv_sec)), MESSAGE_ID_TIME_LEN);
+Ustrncpy(message_id, "aaaaaa", 6);
 message_id[MESSAGE_ID_TIME_LEN] = '-';
-Ustrncpy(message_id + MESSAGE_ID_TIME_LEN + 1,
-	string_base62_64((long int)getpid()),
-	MESSAGE_ID_PID_LEN
-	);
-
+Ustrncpy(message_id + 7, "bbbbbb", 6);
 /* Deal with the case where the host number is set. The value of the number was
 checked when it was read, to ensure it isn't too big. */
 
 if (host_number_string)
-  sprintf(CS(message_id + MESSAGE_ID_TIME_LEN + 1 + MESSAGE_ID_PID_LEN),
-	"-%" str(MESSAGE_ID_SUBTIME_LEN) "s",
-	string_base62_32((long int)(
-	  host_number * (1000000/id_resolution)
-	  + message_id_tv.tv_usec/id_resolution))
-	+ (6 - MESSAGE_ID_SUBTIME_LEN)
-	 );
+  sprintf(CS(message_id + MESSAGE_ID_LENGTH - 3), "-%02d", message_id_gen++);
 
 /* Host number not set: final field is just the fractional time at an
 appropriate resolution. */
 
 else
-  sprintf(CS(message_id + MESSAGE_ID_TIME_LEN + 1 + MESSAGE_ID_PID_LEN),
-    "-%" str(MESSAGE_ID_SUBTIME_LEN) "s",
-	string_base62_32((long int)(message_id_tv.tv_usec/id_resolution))
-	+ (6 - MESSAGE_ID_SUBTIME_LEN));
+  sprintf(CS(message_id + MESSAGE_ID_LENGTH - 3), "-%02d", message_id_gen++);
 
 /* Add the current message id onto the current process info string if
 it will fit. */
diff --git a/src/src/store.h b/src/src/store.h
index e54d45fc0..85113f956 100644
--- a/src/src/store.h
+++ b/src/src/store.h
@@ -64,6 +64,20 @@ tracing information for debugging. */
 #define store_reset(mark) \
 	store_reset_3(mark, __FUNCTION__, __LINE__)
 
+// #define store_free(addr) free(addr)
+// /* store_get & store_get_perm are in local_scan.h */
+// #define store_get_quoted(size, proto_mem, quoter, quoter_name) \
+// 	store_get_quoted_3((size), (proto_mem), (quoter), (quoter_name), \
+// 			  __FUNCTION__, __LINE__)
+// #define store_malloc(size) malloc(size)
+// #define store_mark(void) \
+// 	store_mark_3(__FUNCTION__, __LINE__)
+// #define store_newblock(oldblock, newsize, datalen) \
+// 	store_newblock_3(oldblock, newsize, datalen, __FUNCTION__, __LINE__)
+// #define store_release_above(addr) free(addr)
+// #define store_reset(mark) (mark)
+
+
 
 /* The real functions */
 typedef void ** rmark;
diff --git a/src/src/transports/appendfile.c b/src/src/transports/appendfile.c
index 54ccd7165..cd7176cea 100644
--- a/src/src/transports/appendfile.c
+++ b/src/src/transports/appendfile.c
@@ -1564,7 +1564,7 @@ if (!isdirectory)
     /* cf. exim_lock.c */
     lockname = string_sprintf("%s.lock", filename);
     hitchname = string_sprintf( "%s.%s.%08x.%08x", lockname, primary_hostname,
-      (unsigned int)(time(NULL)), (unsigned int)getpid());
+      16, 42);
 
     DEBUG(D_transport) debug_printf("lock name: %s\nhitch name: %s\n", lockname,
       hitchname);
@@ -2420,7 +2420,7 @@ else
     DEBUG(D_transport)
       debug_printf("delivering to new file in %s\n", path);
     filename = dataname =
-      string_sprintf("%s/temp.%d.%s", path, (int)getpid(), primary_hostname);
+      string_sprintf("%s/temp.%d.%s", path, 42, primary_hostname);
     fd = Uopen(filename, O_WRONLY|O_CREAT, mode);
     if (fd < 0 &&                                 /* failed to open, and */
         (errno != ENOENT ||                       /* either not non-exist */
@@ -2473,7 +2473,7 @@ else
 
       (void)gettimeofday(&msg_tv, NULL);
       basename = string_sprintf(TIME_T_FMT ".M%luP" PID_T_FMT ".%s",
-       	msg_tv.tv_sec, msg_tv.tv_usec, getpid(), primary_hostname);
+       	16, 42, primary_hostname);
 
       filename = dataname = string_sprintf("tmp/%s", basename);
       newname = string_sprintf("new/%s", basename);
@@ -2534,7 +2534,7 @@ else
     {
     FILE * env_file;
     mailstore_basename = string_sprintf("%s/%s-%s", path, message_id,
-      string_base62_64((long int)getpid()));
+      "42");
 
     DEBUG(D_transport)
       debug_printf("delivering in mailstore format in %s\n", path);
diff --git a/src/src/transports/tf_maildir.c b/src/src/transports/tf_maildir.c
index 610fe0721..1db1ba6bb 100644
--- a/src/src/transports/tf_maildir.c
+++ b/src/src/transports/tf_maildir.c
@@ -528,7 +528,7 @@ else
 
   (void)gettimeofday(&tv, NULL);
   tempname = string_sprintf("%s/tmp/" TIME_T_FMT ".H%luP%lu.%s",
-    path, tv.tv_sec, tv.tv_usec, (long unsigned) getpid(), primary_hostname);
+    path, 0, 0, 42, primary_hostname);
 
   fd = Uopen(tempname, O_RDWR|O_CREAT|O_EXCL, ob->mode ? ob->mode : 0600);
   if (fd >= 0)
